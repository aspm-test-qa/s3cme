name: tag
on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'  # Only build tag with semantic versioning format
env:
  COSIGN_VERSION: v1.13.1
  REG_URI: us-west1-docker.pkg.dev
  IMAGE_REG: cloudy-s3c/s3cme
  IMAGE_NAME: s3cme
  SA_EMAIL: s3cme-github-actions-user@cloudy-s3c.iam.gserviceaccount.com
  PROVIDER_ID: projects/510441318314/locations/global/workloadIdentityPools/s3cme-github-pool/providers/github-provider
  KMS_KEY: gcpkms://projects/cloudy-s3c/locations/global/keyRings/s3cme-signer-ring/cryptoKeys/s3cme-signer/cryptoKeyVersions/1

jobs:

  test:
    permissions:
      contents: read
      security-events: write
      id-token: write
    uses: ./.github/workflows/test.yaml

  image:
    outputs:
      digest: ${{ steps.image.outputs.digest }}
      image: ${{ steps.image.outputs.image }}
      token: ${{ steps.token.outputs.access_token }}
    runs-on: ubuntu-latest
    needs:
    - test
    permissions:
      actions: read
      contents: write
      id-token: write
      packages: write
    steps:

    - name: Setup Go
      uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568  # v3.5.0
      with:
        go-version: ^1.19.5

    - run: go version

    - name: Cache Go Modules
      uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d  # v3.2.2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Checkout Code
      uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b  # v3.2.0

    - name: Tidy Modules
      run: |
        go mod tidy
        go mod vendor

    - name: Capture Variables
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - id: auth
      name: Auth GCP
      uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d  # v1.0.0
      with:
        token_format: "access_token"
        workload_identity_provider: ${{ env.PROVIDER_ID }}
        service_account: ${{ env.SA_EMAIL }}

    - name: Output Token
      id: token
      run: |
        echo "access_token=${{ steps.auth.outputs.access_token }}" >> "$GITHUB_OUTPUT"

    - name: Install ko
      uses: imjasonh/setup-ko@ace48d793556083a76f1e3e6068850c1f4a369aa  # v0.6

    - name: Authenticate ko
      env:
        auth_token: ${{ steps.auth.outputs.access_token }}
      run: |
        echo "${auth_token}" | ko login ${{ env.REG_URI }} --username oauth2accesstoken --password-stdin

    - name: Build Image
      id: image
      env:
        KO_DOCKER_REPO: ${{ env.REG_URI }}/${{ env.IMAGE_REG }}/${{ env.IMAGE_NAME }}
        GOFLAGS: "-ldflags=-X=main.version=${{ env.RELEASE_VERSION }}"
        COSIGN_EXPERIMENTAL: "true"
      run: |
        ko build cmd/server/main.go --image-refs .digest --bare --tags ${{ env.RELEASE_VERSION }},latest
        echo "IMAGE_DIGEST=$(cat .digest)" >> $GITHUB_ENV
        image=$(cat .digest | cut -d'@' -f 1)
        digest=$(cat .digest | cut -d'@' -f 2)
        echo "image=$image" >> "$GITHUB_OUTPUT"
        echo "digest=$digest" >> "$GITHUB_OUTPUT"

    - name: Install Cosign
      uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b  # v2.8.1
      with:
        cosign-release: ${{ env.COSIGN_VERSION }}

    - name: Auth Cosign
      run: |
        cosign version
        cosign login ${{ env.REG_URI }} --username=oauth2accesstoken --password=${{ steps.auth.outputs.access_token }}

    - name: Attest Image
      run: |
        cosign sign ${{ env.IMAGE_DIGEST }} \
            --key ${{ env.KMS_KEY }} \
            -a sha=${{ github.sha }} \
            -a run_id=${{ github.run_id }} \
            -a run_attempt=${{ github.run_attempt }} \
            -a tag=${{ env.RELEASE_VERSION }}

    - name: Generate builder
      id: generate-builder
      uses: slsa-framework/slsa-github-generator/.github/actions/generate-builder@main
      with:
        repository: "github.com/$GITHUB_REPOSITORY"
        ref: "$GITHUB_REF"
        go-version: 1.19
        binary: slsa-generator-container-linux-amd64
        compile-builder: "true"
        directory: "internal/builders/container"

    - name: Create Provenance
      id: sign-prov
      env:
        GITHUB_CONTEXT: "${{ toJSON(github) }}"
        COSIGN_EXPERIMENTAL: 1
      run: |
        set -euo pipefail
        predicate_name="predicate.json"
        "$GITHUB_WORKSPACE/slsa-generator-container-linux-amd64" generate --predicate="$predicate_name"
        cosign attest --predicate="$predicate_name" \
          --type slsaprovenance \
          --force \
          ${{ env.IMAGE_DIGEST }}

  # provenance:
  #   needs:
  #   - image
  #   permissions:
  #     actions: read
  #     id-token: write
  #     packages: write
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@68bad40844440577b33778c9f29077a3388838e9  # v1.4.0
  #   secrets:
  #     registry-password: ${{ needs.image.outputs.token }}
  #   with:
  #     image: "${{ needs.image.outputs.image }}"
  #     digest: "${{ needs.image.outputs.digest }}"
  #     registry-username: oauth2accesstoken
  #     compile-generator: true

  # verify:
  #   needs:
  #   - image
  #   - provenance
  #   runs-on: ubuntu-latest
  #   permissions: read-all
  #   steps:
  #     - name: Setup Go
  #       uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568  # v3.5.0
  #       with:
  #         go-version: ^1.19.5
  #     - name: Install SLSA Verifier
  #       run: |
  #         go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@v2.0.1
  #     - name: Verify assets
  #       env:
  #         IMG_DIGEST: "${{ needs.image.outputs.image_uri }}@${{ needs.image.outputs.image_digest }}"
  #       run: |
  #         set -euo pipefail
  #         slsa-verifier verify-image "$IMG_DIGEST" --source-uri "github.com/$GITHUB_REPOSITORY"
